Given a singly linked list and a number K, you are required to complete the function modularNode() which returns the modular node of the linked list.
A modular node is the last node of the linked list whose Index is divisible by the number K, i.e. i%k==0.

Example 1:

Input: LinkedList: 1->2->3->4->5->6->7
       k = 3
Output: 6
Explanation: Node from the last which 
is divisible by 3 is 6
Example 2:

Input: LinkedList: 19->28->37->46->55
           k = 2
Output: 46
Explanation: Node from the last which
is divisible by 2 is 46
Constraints:
1 <= T <= 100
1 <= N <= 500

Solution:
int modularNode(Node* head, int k)
{
	// Code here
	int i=1;
	int ans=-1;
	while(head!=NULL)
	{
	    if(i%k==0)
	    {
	        ans=head->data;
	    }
	    head=head->next;
	    i++;
	}
	return ans;
}
