Given an array, the task is to find the maximum triplet sum in the array.

Example 1:

â€‹Input : arr[ ] = {1, 2, 3, 5}
Output : 10
Explanation:
Here are total 4 combination: (0, 1, 2) , (0, 1, 3),
(0, 2, 3), (1, 2, 3).
So, the Sum of these combinations is 6, 8, 9, and 10.
The maximum sum is 10.

 

Example 2:

Input : arr[ ] = {1, 0, 8, 6, 4, 2} 
Output : 18 


Your Task:
This is a function problem. The input is already taken care of by the driver code. You only need to complete the function maxTripletSum() that takes an array (arr), sizeOfArray (n), and return the maximum triplet sum in the array. The driver code takes care of the printing.

Expected Time Complexity: O(N).
Expected Auxiliary Space: O(1).
 

Constraints:
3 ≤ N ≤ 105
-105 ≤ A[i] ≤ 10

solution:
#include <bits/stdc++.h>
using namespace std;

 // } Driver Code Ends


class Solution{
    public:
    int maxTripletSum(int arr[], int n)
    {
    	// Complete the function
    	  int maxA = INT_MIN, maxB = INT_MIN, maxC = INT_MIN;
 
    for (int i = 0; i < n; i++) {
 
       
        if (arr[i] > maxA) {
            maxC = maxB;
            maxB = maxA;
            maxA = arr[i];
        }
 
       
        else if (arr[i] > maxB) {
            maxC = maxB;
            maxB = arr[i];
        }
 
       
        else if (arr[i] > maxC)
            maxC = arr[i];
    }
 
    return (maxA + maxB + maxC);
    }
};
