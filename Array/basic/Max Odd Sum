Given an array of integers, check whether there is a subsequence with odd sum and if yes, then finding the maximum odd sum. If no subsequence contains odd sum, print -1.


Example 1:

Input:
N=4
arr[] = {4, -3, 3, -5}
Output: 7
Explanation:
The subsequence with maximum odd
sum is 4 + 3 = 7

Example 2:

Input:
N=5
arr[] = {2, 5, -4, 3, -1}
Output: 9
Explanation:
The subsequence with maximum odd 
sum is 2 + 5 + 3 + -1 = 9

Your Task:
Since, this is a function problem. You don't need to take any input, as it is already accomplished by the driver code. You just need to complete the function findMaxOddSubarraySum() that takes array arr and integer N as parameters and returns the desired value.
 

Expected Time Complexity: O(N).
Expected Auxiliary Space: O(1).


Constraints:
2 ≤ N ≤ 107
-103 <= arr[i] <= 103

solution:
#include <bits/stdc++.h>
using namespace std;

 // } Driver Code Ends

class Solution
{
  public:
    long long int findMaxOddSubarraySum(long long int arr[], long long int n)
    {
        //code here.
        int count=0,sum=0,min=INT_MAX,i;
        for(i=0;i<n;i++)
        {
            if(arr[i]%2==0)
            {
                count++;
            }
        }
        if(count==n)
        {
            return -1;
        }
        for(i=0;i<n;i++)
        {
            if(arr[i]>0)
            {
                sum=sum+arr[i];
            }
        }
        if(sum%2==1)
        {
            return sum;
        }
        else
        {
            for(i=0;i<n;i++)
            {
                if(min>abs(arr[i]) && abs(arr[i])%2==1)
                {
                    min=abs(arr[i]);
                }
            }
            return sum-min;
        }
    }
 
};
