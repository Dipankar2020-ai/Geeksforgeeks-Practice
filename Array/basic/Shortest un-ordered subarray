Given an array of n distinct elements. Find the length of shortest unordered (neither increasing nor decreasing) sub array in given array.

 

Example 1:

Input:
n = 5
a[] = {7, 9, 10, 8, 11}
Output:
3
Explanation:
Shortest unsorted subarray is 9, 10, 8
which is of 3 elements.
 

Example 2:

Input:
n = 4
a[] = {1, 2, 3, 5}
Output:
0
 


Your Task:  
You don't need to read input or print anything. Your task is to complete the function shortestUnorderedSubarray() which takes the array a[] and its size n as inputs and returns the length of shortest unordered subarray.

 

Expected Time Complexity: O(n)
Expected Auxiliary Space: O(1)

 

Constraints:
1 <= n <= 105
1 <= a[i] <= 105

solution:
class Solution{
  public:
    int shortestUnorderedSubarray(int arr[], int n)
    {
      if(increasing(arr,n)||decreasing(arr,n))
      {
          return 0;
      }
        
       else
        {
            return 3;
        }
    }
    
    
    bool increasing(int arr[],int n)
    {
        int i;
        for(i=0;i<n-1;i++)
        {
            if(arr[i]<arr[i+1])
            {
                return false;
            }
        }
        return true;
    }
     bool decreasing(int arr[],int n)
     {
        int i;
        for(i=0;i<n-1;i++)
        {
            if(arr[i]>=arr[i+1])
            {
                return false;
            }
        }
        return true;
    }
    
};
