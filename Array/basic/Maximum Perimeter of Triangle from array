Given an Array of non-negative integers. Find out the maximum perimeter of the triangle from the array.

Example 1:

â€‹Input : arr[ ] = {6, 1, 6, 5, 8, 4}
Output : 20
Explanation:
Triangle formed by  8,6 & 6. Thus 
perimeter 20.

â€‹Example 2:

Input : arr[ ] = {7, 55, 20, 1, 4, 33, 12} 
Output :  -1
Explanation:
As the triangle is not possible because 
the condition: the sum of two sides should 
be greater than third is not fulfilled here.
 
Your Task:
This is a function problem. The input is already taken care of by the driver code. You only need to complete the function maxPerimeter() that takes an array (arr), sizeOfArray (n), and return an integer displaying the maximum perimeter of the triangle is possible else print -1. The driver code takes care of the printing.

Expected Time Complexity: O(N*LOG(N)).
Expected Auxiliary Space: O(1).
solution:

int maxPerimeter(int arr[], int n){

    // Complete the function
    sort(arr,arr+n);
    int i;
    
    
    
    for(i=n-1;i>=2;i--)
    {
        int maxa=arr[i];
        int  maxb=arr[i-1];
        int maxc=arr[i-2];
        if(maxa+maxb>maxc && maxa+maxc>maxb && maxc+maxb>maxa )
           {
              return maxa+maxb+maxc;
           }
        
    }
  
   
   
        return -1;
    
    
}
